import { a as m, b as i, c as d, d as r } from './chunk-RD4BVJYH.js'
import './chunk-DGJUBN33.js'
var g = {
    lessThanXSeconds: {
      one: 'bir saniy\u0259d\u0259n az',
      other: '{{count}} bir saniy\u0259d\u0259n az',
    },
    xSeconds: { one: '1 saniy\u0259', other: '{{count}} saniy\u0259' },
    halfAMinute: 'yar\u0131m d\u0259qiq\u0259',
    lessThanXMinutes: {
      one: 'bir d\u0259qiq\u0259d\u0259n az',
      other: '{{count}} bir d\u0259qiq\u0259d\u0259n az',
    },
    xMinutes: { one: 'bir d\u0259qiq\u0259', other: '{{count}} d\u0259qiq\u0259' },
    aboutXHours: { one: 't\u0259xmin\u0259n 1 saat', other: 't\u0259xmin\u0259n {{count}} saat' },
    xHours: { one: '1 saat', other: '{{count}} saat' },
    xDays: { one: '1 g\xFCn', other: '{{count}} g\xFCn' },
    aboutXWeeks: {
      one: 't\u0259xmin\u0259n 1 h\u0259ft\u0259',
      other: 't\u0259xmin\u0259n {{count}} h\u0259ft\u0259',
    },
    xWeeks: { one: '1 h\u0259ft\u0259', other: '{{count}} h\u0259ft\u0259' },
    aboutXMonths: { one: 't\u0259xmin\u0259n 1 ay', other: 't\u0259xmin\u0259n {{count}} ay' },
    xMonths: { one: '1 ay', other: '{{count}} ay' },
    aboutXYears: { one: 't\u0259xmin\u0259n 1 il', other: 't\u0259xmin\u0259n {{count}} il' },
    xYears: { one: '1 il', other: '{{count}} il' },
    overXYears: { one: '1 ild\u0259n \xE7ox', other: '{{count}} ild\u0259n \xE7ox' },
    almostXYears: { one: 'dem\u0259k olar ki 1 il', other: 'dem\u0259k olar ki {{count}} il' },
  },
  c = (a, n, e) => {
    let t,
      s = g[a]
    return (
      typeof s == 'string'
        ? (t = s)
        : n === 1
          ? (t = s.one)
          : (t = s.other.replace('{{count}}', String(n))),
      e?.addSuffix ? (e.comparison && e.comparison > 0 ? t + ' sonra' : t + ' \u0259vv\u0259l') : t
    )
  }
var f = {
    full: "EEEE, do MMMM y 'il'",
    long: "do MMMM y 'il'",
    medium: "d MMM y 'il'",
    short: 'dd.MM.yyyy',
  },
  y = { full: 'H:mm:ss zzzz', long: 'H:mm:ss z', medium: 'H:mm:ss', short: 'H:mm' },
  b = {
    full: "{{date}} {{time}} - 'd\u0259'",
    long: "{{date}} {{time}} - 'd\u0259'",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}',
  },
  l = {
    date: m({ formats: f, defaultWidth: 'full' }),
    time: m({ formats: y, defaultWidth: 'full' }),
    dateTime: m({ formats: b, defaultWidth: 'full' }),
  }
var p = {
    lastWeek: "'sonuncu' eeee p -'d\u0259'",
    yesterday: "'d\xFCn\u0259n' p -'d\u0259'",
    today: "'bug\xFCn' p -'d\u0259'",
    tomorrow: "'sabah' p -'d\u0259'",
    nextWeek: "eeee p -'d\u0259'",
    other: 'P',
  },
  u = (a, n, e, t) => p[a]
var v = {
    narrow: ['e.\u0259', 'b.e'],
    abbreviated: ['e.\u0259', 'b.e'],
    wide: ['eram\u0131zdan \u0259vv\u0259l', 'bizim era'],
  },
  M = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['K1', 'K2', 'K3', 'K4'],
    wide: ['1ci kvartal', '2ci kvartal', '3c\xFC kvartal', '4c\xFC kvartal'],
  },
  x = {
    narrow: ['Y', 'F', 'M', 'A', 'M', '\u0130', '\u0130', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: [
      'Yan',
      'Fev',
      'Mar',
      'Apr',
      'May',
      '\u0130yun',
      '\u0130yul',
      'Avq',
      'Sen',
      'Okt',
      'Noy',
      'Dek',
    ],
    wide: [
      'Yanvar',
      'Fevral',
      'Mart',
      'Aprel',
      'May',
      '\u0130yun',
      '\u0130yul',
      'Avqust',
      'Sentyabr',
      'Oktyabr',
      'Noyabr',
      'Dekabr',
    ],
  },
  P = {
    narrow: ['B.', 'B.e', '\xC7.a', '\xC7.', 'C.a', 'C.', '\u015E.'],
    short: ['B.', 'B.e', '\xC7.a', '\xC7.', 'C.a', 'C.', '\u015E.'],
    abbreviated: [
      'Baz',
      'Baz.e',
      '\xC7\u0259r.a',
      '\xC7\u0259r',
      'C\xFCm.a',
      'C\xFCm',
      '\u015E\u0259',
    ],
    wide: [
      'Bazar',
      'Bazar ert\u0259si',
      '\xC7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131',
      '\xC7\u0259r\u015F\u0259nb\u0259',
      'C\xFCm\u0259 ax\u015Fam\u0131',
      'C\xFCm\u0259',
      '\u015E\u0259nb\u0259',
    ],
  },
  z = {
    narrow: {
      am: 'am',
      pm: 'pm',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
  },
  w = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'gec\u0259yar\u0131',
      noon: 'g\xFCn',
      morning: 's\u0259h\u0259r',
      afternoon: 'g\xFCnd\xFCz',
      evening: 'ax\u015Fam',
      night: 'gec\u0259',
    },
  },
  o = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-\xFCnc\xFC',
    4: '-\xFCnc\xFC',
    100: '-\xFCnc\xFC',
    6: '-nc\u0131',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-\u0131nc\u0131',
    90: '-\u0131nc\u0131',
  },
  k = (a) => {
    if (a === 0) return a + '-\u0131nc\u0131'
    let n = a % 10,
      e = (a % 100) - n,
      t = a >= 100 ? 100 : null
    return o[n] ? o[n] : o[e] ? o[e] : t !== null ? o[t] : ''
  },
  C = (a, n) => {
    let e = Number(a),
      t = k(e)
    return e + t
  },
  h = {
    ordinalNumber: C,
    era: i({ values: v, defaultWidth: 'wide' }),
    quarter: i({ values: M, defaultWidth: 'wide', argumentCallback: (a) => a - 1 }),
    month: i({ values: x, defaultWidth: 'wide' }),
    day: i({ values: P, defaultWidth: 'wide' }),
    dayPeriod: i({
      values: z,
      defaultWidth: 'wide',
      formattingValues: w,
      defaultFormattingWidth: 'wide',
    }),
  }
var W = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i,
  B = /\d+/i,
  D = {
    narrow: /^(b|a)$/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
    wide: /^(bizim eradan əvvəl|bizim era)$/i,
  },
  A = { any: [/^b$/i, /^(a|c)$/i] },
  q = { narrow: /^[1234]$/i, abbreviated: /^K[1234]$/i, wide: /^[1234](ci)? kvartal$/i },
  F = { any: [/1/i, /2/i, /3/i, /4/i] },
  S = {
    narrow: /^[(?-i)yfmaisond]$/i,
    abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
    wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i,
  },
  N = {
    narrow: [
      /^[(?-i)y]$/i,
      /^[(?-i)f]$/i,
      /^[(?-i)m]$/i,
      /^[(?-i)a]$/i,
      /^[(?-i)m]$/i,
      /^[(?-i)i]$/i,
      /^[(?-i)i]$/i,
      /^[(?-i)a]$/i,
      /^[(?-i)s]$/i,
      /^[(?-i)o]$/i,
      /^[(?-i)n]$/i,
      /^[(?-i)d]$/i,
    ],
    abbreviated: [
      /^Yan$/i,
      /^Fev$/i,
      /^Mar$/i,
      /^Apr$/i,
      /^May$/i,
      /^İyun$/i,
      /^İyul$/i,
      /^Avg$/i,
      /^Sen$/i,
      /^Okt$/i,
      /^Noy$/i,
      /^Dek$/i,
    ],
    wide: [
      /^Yanvar$/i,
      /^Fevral$/i,
      /^Mart$/i,
      /^Aprel$/i,
      /^May$/i,
      /^İyun$/i,
      /^İyul$/i,
      /^Avgust$/i,
      /^Sentyabr$/i,
      /^Oktyabr$/i,
      /^Noyabr$/i,
      /^Dekabr$/i,
    ],
  },
  Y = {
    narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
    short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
    abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
    wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i,
  },
  O = {
    narrow: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i],
    abbreviated: [/^Baz$/i, /^Baz\.e$/i, /^Çər\.a$/i, /^Çər$/i, /^Cüm\.a$/i, /^Cüm$/i, /^Şə$/i],
    wide: [
      /^Bazar$/i,
      /^Bazar ertəsi$/i,
      /^Çərşənbə axşamı$/i,
      /^Çərşənbə$/i,
      /^Cümə axşamı$/i,
      /^Cümə$/i,
      /^Şənbə$/i,
    ],
    any: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i],
  },
  V = {
    narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
    any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
  },
  X = {
    any: {
      am: /^a$/i,
      pm: /^p$/i,
      midnight: /^gecəyarı$/i,
      noon: /^gün$/i,
      morning: /səhər$/i,
      afternoon: /gündüz$/i,
      evening: /axşam$/i,
      night: /gecə$/i,
    },
  },
  $ = {
    ordinalNumber: d({ matchPattern: W, parsePattern: B, valueCallback: (a) => parseInt(a, 10) }),
    era: r({
      matchPatterns: D,
      defaultMatchWidth: 'wide',
      parsePatterns: A,
      defaultParseWidth: 'any',
    }),
    quarter: r({
      matchPatterns: q,
      defaultMatchWidth: 'wide',
      parsePatterns: F,
      defaultParseWidth: 'any',
      valueCallback: (a) => a + 1,
    }),
    month: r({
      matchPatterns: S,
      defaultMatchWidth: 'wide',
      parsePatterns: N,
      defaultParseWidth: 'narrow',
    }),
    day: r({
      matchPatterns: Y,
      defaultMatchWidth: 'wide',
      parsePatterns: O,
      defaultParseWidth: 'any',
    }),
    dayPeriod: r({
      matchPatterns: V,
      defaultMatchWidth: 'any',
      parsePatterns: X,
      defaultParseWidth: 'any',
    }),
  }
var L = {
    code: 'az',
    formatDistance: c,
    formatLong: l,
    formatRelative: u,
    localize: h,
    match: $,
    options: { weekStartsOn: 1, firstWeekContainsDate: 1 },
  },
  ta = L
export { L as az, ta as default }
