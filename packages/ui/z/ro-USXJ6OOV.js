import { a as m, b as i, c as s, d as t } from './chunk-RD4BVJYH.js'
import './chunk-DGJUBN33.js'
var h = {
    lessThanXSeconds: {
      one: 'mai pu\u021Bin de o secund\u0103',
      other: 'mai pu\u021Bin de {{count}} secunde',
    },
    xSeconds: { one: '1 secund\u0103', other: '{{count}} secunde' },
    halfAMinute: 'jum\u0103tate de minut',
    lessThanXMinutes: {
      one: 'mai pu\u021Bin de un minut',
      other: 'mai pu\u021Bin de {{count}} minute',
    },
    xMinutes: { one: '1 minut', other: '{{count}} minute' },
    aboutXHours: { one: 'circa 1 or\u0103', other: 'circa {{count}} ore' },
    xHours: { one: '1 or\u0103', other: '{{count}} ore' },
    xDays: { one: '1 zi', other: '{{count}} zile' },
    aboutXWeeks: {
      one: 'circa o s\u0103pt\u0103m\xE2n\u0103',
      other: 'circa {{count}} s\u0103pt\u0103m\xE2ni',
    },
    xWeeks: { one: '1 s\u0103pt\u0103m\xE2n\u0103', other: '{{count}} s\u0103pt\u0103m\xE2ni' },
    aboutXMonths: { one: 'circa 1 lun\u0103', other: 'circa {{count}} luni' },
    xMonths: { one: '1 lun\u0103', other: '{{count}} luni' },
    aboutXYears: { one: 'circa 1 an', other: 'circa {{count}} ani' },
    xYears: { one: '1 an', other: '{{count}} ani' },
    overXYears: { one: 'peste 1 an', other: 'peste {{count}} ani' },
    almostXYears: { one: 'aproape 1 an', other: 'aproape {{count}} ani' },
  },
  d = (a, n, r) => {
    let e,
      o = h[a]
    return (
      typeof o == 'string'
        ? (e = o)
        : n === 1
          ? (e = o.one)
          : (e = o.other.replace('{{count}}', String(n))),
      r?.addSuffix ? (r.comparison && r.comparison > 0 ? '\xEEn ' + e : e + ' \xEEn urm\u0103') : e
    )
  }
var f = {
    full: 'EEEE, d MMMM yyyy',
    long: 'd MMMM yyyy',
    medium: 'd MMM yyyy',
    short: 'dd.MM.yyyy',
  },
  b = { full: 'HH:mm:ss zzzz', long: 'HH:mm:ss z', medium: 'HH:mm:ss', short: 'HH:mm' },
  g = {
    full: "{{date}} 'la' {{time}}",
    long: "{{date}} 'la' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}',
  },
  u = {
    date: m({ formats: f, defaultWidth: 'full' }),
    time: m({ formats: b, defaultWidth: 'full' }),
    dateTime: m({ formats: g, defaultWidth: 'full' }),
  }
var y = {
    lastWeek: "eeee 'trecut\u0103 la' p",
    yesterday: "'ieri la' p",
    today: "'ast\u0103zi la' p",
    tomorrow: "'m\xE2ine la' p",
    nextWeek: "eeee 'viitoare la' p",
    other: 'P',
  },
  l = (a, n, r, e) => y[a]
var v = {
    narrow: ['\xCE', 'D'],
    abbreviated: ['\xCE.d.C.', 'D.C.'],
    wide: ['\xCEnainte de Cristos', 'Dup\u0103 Cristos'],
  },
  P = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['T1', 'T2', 'T3', 'T4'],
    wide: [
      'primul trimestru',
      'al doilea trimestru',
      'al treilea trimestru',
      'al patrulea trimestru',
    ],
  },
  w = {
    narrow: ['I', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: [
      'ian',
      'feb',
      'mar',
      'apr',
      'mai',
      'iun',
      'iul',
      'aug',
      'sep',
      'oct',
      'noi',
      'dec',
    ],
    wide: [
      'ianuarie',
      'februarie',
      'martie',
      'aprilie',
      'mai',
      'iunie',
      'iulie',
      'august',
      'septembrie',
      'octombrie',
      'noiembrie',
      'decembrie',
    ],
  },
  M = {
    narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
    short: ['du', 'lu', 'ma', 'mi', 'jo', 'vi', 's\xE2'],
    abbreviated: ['dum', 'lun', 'mar', 'mie', 'joi', 'vin', 's\xE2m'],
    wide: [
      'duminic\u0103',
      'luni',
      'mar\u021Bi',
      'miercuri',
      'joi',
      'vineri',
      's\xE2mb\u0103t\u0103',
    ],
  },
  z = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mn',
      noon: 'ami',
      morning: 'dim',
      afternoon: 'da',
      evening: 's',
      night: 'n',
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'miezul nop\u021Bii',
      noon: 'amiaz\u0103',
      morning: 'diminea\u021B\u0103',
      afternoon: 'dup\u0103-amiaz\u0103',
      evening: 'sear\u0103',
      night: 'noapte',
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'miezul nop\u021Bii',
      noon: 'amiaz\u0103',
      morning: 'diminea\u021B\u0103',
      afternoon: 'dup\u0103-amiaz\u0103',
      evening: 'sear\u0103',
      night: 'noapte',
    },
  },
  W = {
    narrow: {
      am: 'a',
      pm: 'p',
      midnight: 'mn',
      noon: 'amiaz\u0103',
      morning: 'diminea\u021B\u0103',
      afternoon: 'dup\u0103-amiaz\u0103',
      evening: 'sear\u0103',
      night: 'noapte',
    },
    abbreviated: {
      am: 'AM',
      pm: 'PM',
      midnight: 'miezul nop\u021Bii',
      noon: 'amiaz\u0103',
      morning: 'diminea\u021B\u0103',
      afternoon: 'dup\u0103-amiaz\u0103',
      evening: 'sear\u0103',
      night: 'noapte',
    },
    wide: {
      am: 'a.m.',
      pm: 'p.m.',
      midnight: 'miezul nop\u021Bii',
      noon: 'amiaz\u0103',
      morning: 'diminea\u021B\u0103',
      afternoon: 'dup\u0103-amiaz\u0103',
      evening: 'sear\u0103',
      night: 'noapte',
    },
  },
  D = (a, n) => String(a),
  c = {
    ordinalNumber: D,
    era: i({ values: v, defaultWidth: 'wide' }),
    quarter: i({ values: P, defaultWidth: 'wide', argumentCallback: (a) => a - 1 }),
    month: i({ values: w, defaultWidth: 'wide' }),
    day: i({ values: M, defaultWidth: 'wide' }),
    dayPeriod: i({
      values: z,
      defaultWidth: 'wide',
      formattingValues: W,
      defaultFormattingWidth: 'wide',
    }),
  }
var x = /^(\d+)?/i,
  C = /\d+/i,
  j = {
    narrow: /^(Î|D)/i,
    abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
    wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i,
  },
  k = {
    any: [/^ÎC/i, /^DC/i],
    wide: [/^(Înainte de Cristos|Înaintea erei noastre)/i, /^(După Cristos|Era noastră)/i],
  },
  F = { narrow: /^[1234]/i, abbreviated: /^T[1234]/i, wide: /^trimestrul [1234]/i },
  H = { any: [/1/i, /2/i, /3/i, /4/i] },
  T = {
    narrow: /^[ifmaasond]/i,
    abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
    wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i,
  },
  E = {
    narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [
      /^ia/i,
      /^f/i,
      /^mar/i,
      /^ap/i,
      /^mai/i,
      /^iun/i,
      /^iul/i,
      /^au/i,
      /^s/i,
      /^o/i,
      /^n/i,
      /^d/i,
    ],
  },
  V = {
    narrow: /^[dlmjvs]/i,
    short: /^(d|l|ma|mi|j|v|s)/i,
    abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
    wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i,
  },
  X = {
    narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
    any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i],
  },
  L = {
    narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
    any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i,
  },
  S = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mn/i,
      noon: /amiaza/i,
      morning: /dimineaţa/i,
      afternoon: /după-amiaza/i,
      evening: /seara/i,
      night: /noaptea/i,
    },
  },
  p = {
    ordinalNumber: s({ matchPattern: x, parsePattern: C, valueCallback: (a) => parseInt(a, 10) }),
    era: t({
      matchPatterns: j,
      defaultMatchWidth: 'wide',
      parsePatterns: k,
      defaultParseWidth: 'any',
    }),
    quarter: t({
      matchPatterns: F,
      defaultMatchWidth: 'wide',
      parsePatterns: H,
      defaultParseWidth: 'any',
      valueCallback: (a) => a + 1,
    }),
    month: t({
      matchPatterns: T,
      defaultMatchWidth: 'wide',
      parsePatterns: E,
      defaultParseWidth: 'any',
    }),
    day: t({
      matchPatterns: V,
      defaultMatchWidth: 'wide',
      parsePatterns: X,
      defaultParseWidth: 'any',
    }),
    dayPeriod: t({
      matchPatterns: L,
      defaultMatchWidth: 'any',
      parsePatterns: S,
      defaultParseWidth: 'any',
    }),
  }
var A = {
    code: 'ro',
    formatDistance: d,
    formatLong: u,
    formatRelative: l,
    localize: c,
    match: p,
    options: { weekStartsOn: 1, firstWeekContainsDate: 1 },
  },
  $ = A
export { $ as default, A as ro }
